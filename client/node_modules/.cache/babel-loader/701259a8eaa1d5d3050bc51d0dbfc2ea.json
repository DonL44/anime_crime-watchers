{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from '@wry/equality';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, canUseWeakSet, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n  var stateRef = useRef();\n\n  if (!stateRef.current || client !== stateRef.current.client || query !== stateRef.current.query) {\n    stateRef.current = new InternalState(client, query);\n  }\n\n  var state = stateRef.current;\n\n  var _a = useState(0),\n      _tick = _a[0],\n      setTick = _a[1];\n\n  state.forceUpdate = function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  };\n\n  return state;\n}\n\nvar InternalState = function () {\n  function InternalState(client, query) {\n    this.client = client;\n    this.query = query;\n    this.asyncResolveFns = new Set();\n    this.optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)();\n    this.ssrDisabledResult = maybeDeepFreeze({\n      loading: true,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.loading\n    });\n    this.skipStandbyResult = maybeDeepFreeze({\n      loading: false,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.ready\n    });\n    this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n    verifyDocumentType(query, DocumentType.Query);\n  }\n\n  InternalState.prototype.forceUpdate = function () {\n    __DEV__ && invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  };\n\n  InternalState.prototype.asyncUpdate = function () {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      _this.asyncResolveFns.add(resolve);\n\n      _this.optionsToIgnoreOnce.add(_this.watchQueryOptions);\n\n      _this.forceUpdate();\n    });\n  };\n\n  InternalState.prototype.useQuery = function (options) {\n    var _this = this;\n\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n    this.useOptions(options);\n    var obsQuery = this.useObservableQuery();\n    var result = useSyncExternalStore(useCallback(function () {\n      if (_this.renderPromises) {\n        return function () {};\n      }\n\n      var onNext = function () {\n        var previousResult = _this.result;\n        var result = obsQuery.getCurrentResult();\n\n        if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && equal(previousResult.data, result.data)) {\n          return;\n        }\n\n        _this.setResult(result);\n      };\n\n      var onError = function (error) {\n        var last = obsQuery[\"last\"];\n        subscription.unsubscribe();\n\n        try {\n          obsQuery.resetLastResults();\n          subscription = obsQuery.subscribe(onNext, onError);\n        } finally {\n          obsQuery[\"last\"] = last;\n        }\n\n        if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n          throw error;\n        }\n\n        var previousResult = _this.result;\n\n        if (!previousResult || previousResult && previousResult.loading || !equal(error, previousResult.error)) {\n          _this.setResult({\n            data: previousResult && previousResult.data,\n            error: error,\n            loading: false,\n            networkStatus: NetworkStatus.error\n          });\n        }\n      };\n\n      var subscription = obsQuery.subscribe(onNext, onError);\n      return function () {\n        return subscription.unsubscribe();\n      };\n    }, [obsQuery, this.renderPromises, this.client.disableNetworkFetches]), function () {\n      return _this.getCurrentResult();\n    }, function () {\n      return _this.getCurrentResult();\n    });\n    this.unsafeHandlePartialRefetch(result);\n    var queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(function (resolve) {\n        return resolve(queryResult);\n      });\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  };\n\n  InternalState.prototype.useOptions = function (options) {\n    var _a;\n\n    var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n    var currentWatchQueryOptions = this.watchQueryOptions;\n\n    if (this.optionsToIgnoreOnce.has(currentWatchQueryOptions) || !equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n        this.observable.reobserve(watchQueryOptions);\n        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if ((this.renderPromises || this.client.disableNetworkFetches) && this.queryHookOptions.ssr === false && !this.queryHookOptions.skip) {\n      this.result = this.ssrDisabledResult;\n    } else if (this.queryHookOptions.skip || this.watchQueryOptions.fetchPolicy === 'standby') {\n      this.result = this.skipStandbyResult;\n    } else if (this.result === this.ssrDisabledResult || this.result === this.skipStandbyResult) {\n      this.result = void 0;\n    }\n  };\n\n  InternalState.prototype.createWatchQueryOptions = function (_a) {\n    var _b;\n\n    if (_a === void 0) {\n      _a = {};\n    }\n\n    var skip = _a.skip,\n        ssr = _a.ssr,\n        onCompleted = _a.onCompleted,\n        onError = _a.onError,\n        displayName = _a.displayName,\n        defaultOptions = _a.defaultOptions,\n        otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"displayName\", \"defaultOptions\"]);\n\n    var watchQueryOptions = Object.assign(otherOptions, {\n      query: this.query\n    });\n\n    if (this.renderPromises && (watchQueryOptions.fetchPolicy === 'network-only' || watchQueryOptions.fetchPolicy === 'cache-and-network')) {\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {};\n    }\n\n    if (skip) {\n      var _c = watchQueryOptions.fetchPolicy,\n          fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c,\n          _d = watchQueryOptions.initialFetchPolicy,\n          initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy: initialFetchPolicy,\n        fetchPolicy: 'standby'\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy = ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) || this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  };\n\n  InternalState.prototype.getDefaultFetchPolicy = function () {\n    var _a, _b;\n\n    return ((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"cache-first\";\n  };\n\n  InternalState.prototype.onCompleted = function (data) {};\n\n  InternalState.prototype.onError = function (error) {};\n\n  InternalState.prototype.useObservableQuery = function () {\n    var obsQuery = this.observable = this.renderPromises && this.renderPromises.getSSRObservable(this.watchQueryOptions) || this.observable || this.client.watchQuery(mergeOptions(this.queryHookOptions.defaultOptions, this.watchQueryOptions));\n    this.obsQueryFields = useMemo(function () {\n      return {\n        refetch: obsQuery.refetch.bind(obsQuery),\n        reobserve: obsQuery.reobserve.bind(obsQuery),\n        fetchMore: obsQuery.fetchMore.bind(obsQuery),\n        updateQuery: obsQuery.updateQuery.bind(obsQuery),\n        startPolling: obsQuery.startPolling.bind(obsQuery),\n        stopPolling: obsQuery.stopPolling.bind(obsQuery),\n        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery)\n      };\n    }, [obsQuery]);\n    var ssrAllowed = !(this.queryHookOptions.ssr === false || this.queryHookOptions.skip);\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  };\n\n  InternalState.prototype.setResult = function (nextResult) {\n    var previousResult = this.result;\n\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n\n    this.result = nextResult;\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  };\n\n  InternalState.prototype.handleErrorOrCompleted = function (result) {\n    if (!result.loading) {\n      if (result.error) {\n        this.onError(result.error);\n      } else if (result.data) {\n        this.onCompleted(result.data);\n      }\n    }\n  };\n\n  InternalState.prototype.getCurrentResult = function () {\n    if (!this.result) {\n      this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n    }\n\n    return this.result;\n  };\n\n  InternalState.prototype.toQueryResult = function (result) {\n    var queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    var data = result.data,\n        partial = result.partial,\n        resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n\n    this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({\n      data: data\n    }, resultWithoutPartial), this.obsQueryFields), {\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: true,\n      previousData: this.previousData\n    }));\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      queryResult.error = new ApolloError({\n        graphQLErrors: result.errors\n      });\n    }\n\n    return queryResult;\n  };\n\n  InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n    if (result.partial && this.queryHookOptions.partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && this.observable.options.fetchPolicy !== 'cache-only') {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch\n      });\n      this.observable.refetch();\n    }\n  };\n\n  return InternalState;\n}();","map":{"version":3,"mappings":"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","names":["invariant","useCallback","useContext","useMemo","useRef","useState","useSyncExternalStore","equal","mergeOptions","getApolloContext","ApolloError","NetworkStatus","DocumentType","verifyDocumentType","useApolloClient","canUseWeakMap","canUseWeakSet","isNonEmptyArray","maybeDeepFreeze","Object","hasOwnProperty","useQuery","query","options","create","useInternalState","client","stateRef","current","InternalState","state","_tick","setTick","forceUpdate","Set","WeakSet","loading","data","error","networkStatus","ready","WeakMap","Map","Query","__DEV__","Promise","_this","asyncResolveFns","add","resolve","optionsToIgnoreOnce","watchQueryOptions","renderPromises","useOptions","obsQuery","useObservableQuery","result","onNext","previousResult","getCurrentResult","setResult","onError","last","subscription","unsubscribe","resetLastResults","subscribe","call","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","size","forEach","clear","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","has","observable","delete","reobserve","previousData","_a","onCompleted","prototype","ssr","skip","ssrDisabledResult","fetchPolicy","skipStandbyResult","displayName","defaultOptions","otherOptions","assign","variables","getDefaultFetchPolicy","_c","_d","initialFetchPolicy","_b","watchQuery","getSSRObservable","obsQueryFields","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","toQueryResultCache","get","partial","resultWithoutPartial","set","called","errors","graphQLErrors","partialRefetch","keys","length"],"sources":["C:\\Users\\Donov\\OneDrive\\Desktop\\bootcamp\\projects\\anime_crime-watchers\\node_modules\\@apollo\\src\\react\\hooks\\useQuery.ts"],"sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables, WatchQueryFetchPolicy } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, canUseWeakSet, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  }\n\n  asyncUpdate() {\n    return new Promise<QueryResult<TData, TVariables>>(resolve => {\n      this.asyncResolveFns.add(resolve);\n      this.optionsToIgnoreOnce.add(this.watchQueryOptions);\n      this.forceUpdate();\n    });\n  }\n\n  private asyncResolveFns = new Set<\n    (result: QueryResult<TData, TVariables>) => void\n  >();\n\n  private optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)<\n    WatchQueryOptions<TVariables, TData>\n  >();\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    const queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(resolve => resolve(queryResult));\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    // To force this equality test to \"fail,\" thereby reliably triggering\n    // observable.reobserve, add any current WatchQueryOptions object(s) you\n    // want to be ignored to this.optionsToIgnoreOnce. A similar effect could be\n    // achieved by nullifying this.watchQueryOptions so the equality test\n    // immediately fails because currentWatchQueryOptions is null, but this way\n    // we can promise a truthy this.watchQueryOptions at all times.\n    if (\n      this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n      !equal(watchQueryOptions, currentWatchQueryOptions)\n    ) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // As advertised in the -Once of this.optionsToIgnoreOnce, this trick is\n        // only good for one forced execution of observable.reobserve per\n        // ignored WatchQueryOptions object, though it is unlikely we will ever\n        // see this exact currentWatchQueryOptions object again here, since we\n        // just replaced this.watchQueryOptions with watchQueryOptions.\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(watchQueryOptions);\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery(mergeOptions(\n          // Any options.defaultOptions passed to useQuery serve as default\n          // options because we use them only here, when first creating the\n          // ObservableQuery by calling client.watchQuery.\n          this.queryHookOptions.defaultOptions,\n          this.watchQueryOptions,\n        ));\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false ||\n      this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      if (result.error) {\n        this.onError(result.error);\n      } else if (result.data) {\n        this.onCompleted(result.data);\n      }\n    }\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: true,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}